(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{287:function(e,r,o){"use strict";o.r(r),r.default=[{title:"【读书笔记】《HTML》HMTL",path:"/posts/1xixix.html",strippedContent:' 学习目标  1、本专业介绍、HTML相关概念，HTML发展历史  2、WEB标准，W3C/WHATWG/ECMA相关概念  3、相关软件的应用以及站点的创建  4、HTML基本结构和HTML语法  5、HTML常用标记  一、本专业介绍、HTML相关概念，HTML发展历史  本专业介绍    移动前端/WEB前端    网站建站流程         二、WEB标准，W3C/WHATWG/ECMA相关概念  WEB标准组成                  组织解析：  （1）W3C( World Wide Web Consortium )万维网联盟，创建于1994年是Web技术领域最具权威和影响力的国际中立性技术标准机构。  W3C (制定了结构(xhtml、xml)和表现(css)的标准，非赢利性的。)  （2）ECMA(European Computer Manufactures Association) 欧洲电脑场商联合会。  ECMA制定了行为(DOM(文档对象模型)，ECMAScript)标准    （3）WHATWG网页超文本应用技术工作小组是：    一个以推动网络HTML 5 标准为目的而成立的组织。在2004年，由Opera、Mozilla基金会和苹果这些浏览器厂商组成。    HTML及相关概念的介绍    HTML 指的是超文本标记语言 (Hyper Text Markup Language) www万维网的描述性语言。    超文本标记语言：标准通用标记语言下的一个应用。HTML 不是一种编程语言，而是一种标记语言 (markup language)，是网页制作所必备的。“超文本”就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素 。超文本标记语言(或超文本标签语言)的结构包括“头”部分、和“主体”部分，其中“头”部提供关于网页的信息，“主体”部分提供网页的具体内容。    XHTML指可扩展超文本标记语言（标识语言）（EXtensible HyperText Markup Language）是一种置标语言，表现方式与超文本标记语言（HTML）类似，不过语法上更加严格。    HTML5指的是HTML的第五次重大修改（第5个版本）(HTML5 是 W3C 与 WHATWG 合作的结果)    HTML发展历史             三、相关软件的应用以及站点的创建  1)站点的作用  A/ 用来归纳一个网站上所有的网页、素材以及他们之间的联系  B/ 规划网站的所有内容和代码 整合资源  2)创建站点的步骤  创建网页所需各个文件夹 css、js、images  3)文件的命名规则  A/ 件命名规则：用英文，不用中文  B/ 名称全部用小写英文字母、数字、下划线的组合，其中不得包含汉字、空格和特殊字符；必须以英文字母开头。@#￥%……！  C/ 网站的首页必须命名为index.html不建议使用shouye.html    四、HTML基本结构和HTML基本语法  HTML基本结构             HTML的基本语法    1、<常规标记>  <标记 属性=“属性值” 属性=“属性值”></标记>    标记也可叫标签或叫元素  例如：<head></head>    2.空标记  <标记 属性=“属性值” />  例如：<meta charset=”utf-8”>    说明：  1.写在<>中的第一个单词叫做标记，标签，元素。  2.标记和属性用空格隔开，属性和属性值用等号连接，属性值必须放在“”号内。  3.一个标记可以没有属性也可以有多个属性，属性和属性之间不分先后顺序。  4.空标记没有结束标签，用“/”代替。    五、HTML常用标记  1、文本标题（h1-h6）      <h1>LOGO</h1>  <h2>二级标题</h2>  <h3>三级标题H3</h3>  <h4>四级标题H4</h4>  <h5>五级标题</h5>  <h6>六级标题</h6>  注：文本标题标签自带加粗，有自己的文本大小，并且独占一行，有默认间距    2、段落文本(p)      <p>段落文本内容</p>  标识一个段落(段落与段落之间有段间距)    3、空格      &nbsp;  所占位置没有一个确定的值,这与当前字体字号都有关系.    4、换行(br)    <br />  换行是一个空标记(强制换行)    5、水平线       <hr />空标记  6、加粗有两个标记    A、<b>加粗内容</b>只是显示加粗  B、<strong>强调的内容</strong>突出的文本  7、倾斜    <em>强调文本</em>    <i>倾斜文本</i>         8、 扩展    <u>文本</u>下划线    <del>文本</del>删除线    <s>文本</s>删除线    <sub></sub>下标    <sup></sup>上标    9、列表(ul,ol,dl)    HTML中有三种列表分别是：无序列表，有序列表，自定义列表    *无序列表  无序列表组成：  <ul>(unordered list)  <li></li>  <li></li>  ．．．．．．  </ul>    *有序列表  有序列表组成：  <ol>(ordered list)  <li></li>  <li></li>  ．．．．．．  </ol>    *自定义列表  <dl>(definition list)  <dt>名词</dt>  <dd>解释</dd>  (definition description)  ．．．．．．  </dl>          知识扩展2----有序列表的属性    1)、type:规定列表中的列表项目的项目符号的类型  语法：<ol type="a"></ol>  1 数字顺序的有序列表（默认值）（1, 2, 3, 4）。  a 字母顺序的有序列表，小写（a, b, c, d）。  A 字母顺序的有序列表，大写（A,B,C,D)  i 罗马数字，小写（i, ii, iii, iv）。  I 罗马数字，大写（I, ii, iii, iv）。  2)、start 属性规定有序列表的开始点。  语法：<ol start="5"></ol>      10、插入图片    <img src="目标文件路径及全称" alt="图片替换文本" title="图片标题" width="宽度" height="高度"/>  注:所要插入的图片必须放在站点下  title的作用:图片的标题； 在你鼠标悬停在该图片上时显示一个小提示，鼠标离开就没有了，HTML的绝大多数标签都支持title属性，title属性就是专门做提示信息的  alt的作用:提示文本 必写；alt属性是在你的图片因为某种原因不能加载时在页面显示的提示信息，它会直接输出在原本加载图片的地方。（优化图片的）    *相对路径的写法：  1)当当前文件与目标文件在同一目录下，直接书写目标文件文件名+扩展名；<img src=”q12.jpg”/>  2)当当前文件与目标文件所处的文件夹在同一目录下，写法如下：  文件夹名/目标文件全称+扩展名；<img src=”images/q12.jpg”/>  3)当当前文件所处的文件夹和目标文件所处的文件夹在同一目录下，写法如下：  ../目标文件所处文件夹名/目标文件文件名+扩展名；  <img src=”../images/q12.jpg”/>    11、超链接的应用         语法：  <a href="目标文件路径及全称/连接地址" title="提示文本" target="_blank">链接文本/图片</a>  <a href="#"></a>空链接  属性：target:页面打开方式，默认属性值_self。  属性值：_blank 新窗口打开  <a href="#" target="_blank">新页面打开</a>    12、数据表格的作用及组成    作用：显示数据    表格组成  <table width="value" height="value" border="value">        <tr>              <td></td>              <td></td>       </tr>  </table>    注：一个tr表示一行;一个td表示一列(一个单元格)    行分组    <thead></thead>      表头    <tbody></tbody>      表体必需存在的标签    <tfoot></tfoot>         表尾    说明：一个Table中，只能包含一个thead,一个tfoot,但可包含多个tbody,tbody标签是写表格时必备的标签。      *数据表格的相关属性  1）width="表格的宽度"  2）height="表格的高度"  3）border="表格的边框"  4）bgcolor="表格的背景色"  5）bordercolor="表格的边框颜色"  6）cellspacing="单元格与单元格之间的间距"  7）cellpadding="单元格与内容之间的空隙"  8）水平对齐方式：align="left左对齐/center居中/right右对齐";    9) 垂直对齐方式 ：valign="top顶对齐/middle居中/bottom底对齐/baseline(基线);  10)合并单元格属性：  colspan=“所要合并的单元格的列数"合并列;    rowspan=“所要合并单元格的行数”合并行;    13、表单的作用及组成    表单的作用：用来收集用户的信息的;    表单组成：表单框（表单域form）                      提示信息                         表单控件/表单元素    1)、表单框    <form name="表单名称（英文字母开头的）" method（提交方式）="post/get" action="表单提交的地址"></form>  2）文本框    <input type="text" value="默认值"maxlength="5" placeholder="提示文本" />  3)密码框    <input type="password" placeholder="密码"/>  4)提交按钮    <input type="submit" value="按钮内容" />    <input type="reset" value="按钮内容"/>重置按钮    5）单选框/单选按钮    <input type="radio" name="ral" value="radiovalue"/>  <input type="radio" name="ral" checked="checked" />  单选按钮里的name属性必须写，同一组单选按钮的name属性值必须一样。  6）复选框    <input type="checkbox" name="like" value="checkboxvalue" />    复选按钮里的name属性必须写，同一组复选按钮的name属性值必须一样。    checked="checked"表示默认被选中，可简写成checked    disabled="disabled"表示禁用，可简写成disabled    enabled:可用状态    7)下拉菜单    <select name="">  <option name="" value="表单被提交时被发送到服务器的值" selected="selected">菜单内容</option>  </select>  8）多行文本框（文本域）    <textarea name="textareal" cols="字符宽度" rows="行数">  </textarea>  9)跳转按钮    <input name="\'" type="button" value=“按钮内容” />  <button></button>      button和submit的区别是：    submit是提交按钮起到提交信息的作用，type类型是button只起到跳转的作用，不进行提交。      10)上传文件框    文件域：<input type="file" />  11)图像域    <input type="image" src="" width="100" height="100" alt="上传图片" />  12)隐藏文本框    <input type="hidden" value="值" />上传隐藏的值/字段    13)提示信息标签(作用：将提示信息及相应的表单控件进行关联)    <label   for="user">提示信息</label>    <input type="text" id="user"/>    14)表单字段集    <fieldset></fieldset>于对表单中的元素进行分组,可以嵌套。    功能：相当于一个方框，在字段集中可以包含文本和其他元素。该元素用于对表单中的元素进行分组并在文档中区别标出文本。fieldset元素可以嵌套，在其内部可以在设置多个    fieldset对象。    15)字段级标题    <legend></legend>    功能：legend元素可以在fieldset对象绘制的方框内插入一个标题。legend元素必须是fieldset内的第一个元素。    扩展知识点3：对于不同的输入类型，value 属性的用法的意义    value 属性为 input 元素设定值。  对于不同的输入类型，value 属性的用法也不同：  type="button", "reset", "submit" - 定义按钮上的显示的文本  type="text", "password" - 定义输入字段的初始值  type="checkbox", "radio" - 定义与输入相关联的值  注释：<input type="checkbox"> 和 <input type="radio"> 中必须设置 value 他name属性。    扩展知识点4：    <form name="表单名称" method="post/get" action=""></form>  Form中的获取数据的两个方式get和post的区别？    1. get请求通常是从服务器上获取数据，post请求通常表示向服务器提交数据。  2. get请求发送的数据都写在地址栏上，用户可见。而post请求发送的数据用户不可见。  3. get请求不能提交大量的数据，但post可以，因此不要混用。  建议：  1、get方式的安全性较Post方式要差些，包含机密信息的话，建议用Post数据提交方式；    2、在做数据查询时，建议用Get方式；而在做数据添加、修改或删除时，建议用Post方式；    14、div和span的用法    <div ></div>  没有具体含义， 除了独占一行之外没有任何其它的默认属性，是页面布局中常用的标签；    <span> </span>  文本结点标签  可以是某一小段文本，或是某一个字。 它除了不换行外，没有任何其它的默认属性；  ————————————————  '},{title:"【读书笔记】《css》CSS",path:"/posts/2CSS.html",strippedContent:' 1.内联式css样式        1  2  2.嵌入式css样式，写在当前的文件中    <style type="text/css">  span{  color:red;  }  </style>  1  2  3  4  5  3.外部式css样式  <link href="base.css" rel="stylesheet" type="text/css" />  1  4.三种方法的优先级  内联式 > 嵌入式 > 外部式    CSS选择器  5.标签选择器  p{font-size:12px;line-height:1.6em;}  1  6.类选择器  .类选器名称{css样式代码;}  .setGreen{      color:green;  }  1  2  3  4  7.ID选择器  #setGreen{     color:green;  }  1  2  3  8.子选择器  用于选择指定标签元素的第一代子元素    .food>li{border:1px solid red;}  1  这行代码会使class名为food下的子元素li（水果、蔬菜）加入红色实线边框。    9.包含(后代)选择器  包含选择器，即加入空格,用于选择指定标签元素下的后辈元素    .first  span{color:red;}  1  这行代码会使第一段文字内容中的“胆小如鼠”字体颜色变为红色   请注意这个选择器与子选择器的区别，子选择器（child selector）仅是指它的直接后代，或者你可以理解为作用于子元素的第一代后代。而后代选择器是作用于所有子后代元素。后代选择器通过空格来进行选择，而子选择器是通过“>”进行选择 span及span的后代都变化    10.通用选择器  * {color:red;}  1  它的作用是匹配html中所有标签元素  ————————————————  '},{title:"【读书笔记】《JavaScript权威指南》js数组",path:"/posts/3%E6%95%B0%E7%BB%84.html",strippedContent:' # [js数组方法大全]    **JavaScript中创建数组有两种方式**    **（一）使用 Array 构造函数：**         ```  var arr1 = new Array(); //创建一个空数组var arr2 = new Array(20); // 创建一个包含20项的数组var arr3 = new Array("lily","lucy","Tom"); // 创建一个包含3个字符串的数组  ```         ***\\*（二）使用数组字面量表示法：\\****         ```  var arr4 = []; //创建一个空数组var arr5 = [20]; // 创建一个包含1项的数组var arr6 = ["lily","lucy","Tom"]; // 创建一个包含3个字符串的数组  ```         数组的方法有数组原型方法，也有从object对象继承来的方法，这里我们只介绍数组的原型方法，数组原型方法主要有以下这些：    join()  push()和pop()  shift() 和 unshift()  sort()  reverse()  concat()  slice()  splice()  indexOf()和 lastIndexOf() （ES5新增）  forEach() （ES5新增）  map() （ES5新增）  filter() （ES5新增）  every() （ES5新增）  some() （ES5新增）  reduce()和 reduceRight() （ES5新增）    ```    ```    下面详细介绍一下各个方法的基本功能。    **1、join()**    join(separator): 将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符，该方法只接收一个参数：即分隔符。    ```  var` `arr = [1,2,3];``console.log(arr.join()); ``// 1,2,3``console.log(arr.join(``"-"``)); ``// 1-2-3``console.log(arr); ``// [1, 2, 3]（原数组不变）  ```    通过join()方法可以实现重复字符串，只需传入字符串以及重复的次数，就能返回重复后的字符串，函数如下：    ```  function` `repeatString(str, n) {``return` `new` `Array(n + 1).join(str);``}``console.log(repeatString(``"abc"``, 3)); ``// abcabcabc``console.log(repeatString(``"Hi"``, 5)); ``// HiHiHiHiHi  ```    **2、push()和pop()**    push(): 可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。   pop()：数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。    ```  var` `arr = [``"Lily"``,``"lucy"``,``"Tom"``];``var` `count = arr.push(``"Jack"``,``"Sean"``);``console.log(count); ``// 5``console.log(arr); ``// ["Lily", "lucy", "Tom", "Jack", "Sean"]``var` `item = arr.pop();``console.log(item); ``// Sean``console.log(arr); ``// ["Lily", "lucy", "Tom", "Jack"]  ```    **3、shift() 和 unshift()**    shift()：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined 。   unshift:将参数添加到原数组开头，并返回数组的长度 。    这组方法和上面的push()和pop()方法正好对应，一个是操作数组的开头，一个是操作数组的结尾。    ```  var` `arr = [``"Lily"``,``"lucy"``,``"Tom"``];``var` `count = arr.unshift(``"Jack"``,``"Sean"``);``console.log(count); ``// 5``console.log(arr); ``//["Jack", "Sean", "Lily", "lucy", "Tom"]``var` `item = arr.shift();``console.log(item); ``// Jack``console.log(arr); ``// ["Sean", "Lily", "lucy", "Tom"]  ```    **4、sort()**    sort()：按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。    在排序时，sort()方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值， sort()方法比较的也是字符串，因此会出现以下的这种情况：    ```  var` `arr1 = [``"a"``, ``"d"``, ``"c"``, ``"b"``];``console.log(arr1.sort()); ``// ["a", "b", "c", "d"]``arr2 = [13, 24, 51, 3];``console.log(arr2.sort()); ``// [13, 24, 3, 51]``console.log(arr2); ``// [13, 24, 3, 51](元数组被改变)  ```    为了解决上述问题，sort()方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回 0，如果第一个参数应该位于第二个之后则返回一个正数。以下就是一个简单的比较函数：    ```  function` `compare(value1, value2) {``if` `(value1 < value2) {``return` `-1;``} ``else` `if` `(value1 > value2) {``return` `1;``} ``else` `{``return` `0;``}``}``arr2 = [13, 24, 51, 3];``console.log(arr2.sort(compare)); ``// [3, 13, 24, 51]  ```    如果需要通过比较函数产生降序排序的结果，只要交换比较函数返回的值即可：    ```  function` `compare(value1, value2) {``if` `(value1 < value2) {``return` `1;``} ``else` `if` `(value1 > value2) {``return` `-1;``} ``else` `{``return` `0;``}``}``arr2 = [13, 24, 51, 3];``console.log(arr2.sort(compare)); ``// [51, 24, 13, 3]  ```    **5、reverse()**    reverse()：反转数组项的顺序。    ```  var` `arr = [13, 24, 51, 3];``console.log(arr.reverse()); ``//[3, 51, 24, 13]``console.log(arr); ``//[3, 51, 24, 13](原数组改变)  ```    **6、concat()**    concat() ：将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。    ```  var` `arr = [1,3,5,7];``var` `arrCopy = arr.concat(9,[11,13]);``console.log(arrCopy); ``//[1, 3, 5, 7, 9, 11, 13]``console.log(arr); ``// [1, 3, 5, 7](原数组未被修改)  ```    从上面测试结果可以发现：传入的不是数组，则直接把参数添加到数组后面，如果传入的是数组，则将数组中的各个项添加到数组中。但是如果传入的是一个二维数组呢？    ```  var` `arrCopy2 = arr.concat([9,[11,13]]);``console.log(arrCopy2); ``//[1, 3, 5, 7, 9, Array[2]]``console.log(arrCopy2[5]); ``//[11, 13]  ```    上述代码中，arrCopy2数组的第五项是一个包含两项的数组，也就是说concat方法只能将传入数组中的每一项添加到数组中，如果传入数组中有些项是数组，那么也会把这一数组项当作一项添加到arrCopy2中。    **7、slice()**    slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。    ```  var` `arr = [1,3,5,7,9,11];``var` `arrCopy = arr.slice(1);``var` `arrCopy2 = arr.slice(1,4);``var` `arrCopy3 = arr.slice(1,-2);``var` `arrCopy4 = arr.slice(-4,-1);``console.log(arr); ``//[1, 3, 5, 7, 9, 11](原数组没变)``console.log(arrCopy); ``//[3, 5, 7, 9, 11]``console.log(arrCopy2); ``//[3, 5, 7]``console.log(arrCopy3); ``//[3, 5, 7]``console.log(arrCopy4); ``//[5, 7, 9]  ```    arrCopy只设置了一个参数，也就是起始下标为1，所以返回的数组为下标1（包括下标1）开始到数组最后。   arrCopy2设置了两个参数，返回起始下标（包括1）开始到终止下标（不包括4）的子数组。   arrCopy3设置了两个参数，终止下标为负数，当出现负数时，将负数加上数组长度的值（6）来替换该位置的数，因此就是从1开始到4（不包括）的子数组。   arrCopy4中两个参数都是负数，所以都加上数组长度6转换成正数，因此相当于slice(2,5)。    **8、splice()**    splice()：很强大的数组方法，它有很多种用法，可以实现删除、插入和替换。    删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。    插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入4和6。  替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入4和6。    splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。    ```  var` `arr = [1,3,5,7,9,11];``var` `arrRemoved = arr.splice(0,2);``console.log(arr); ``//[5, 7, 9, 11]``console.log(arrRemoved); ``//[1, 3]``var` `arrRemoved2 = arr.splice(2,0,4,6);``console.log(arr); ``// [5, 7, 4, 6, 9, 11]``console.log(arrRemoved2); ``// []``var` `arrRemoved3 = arr.splice(1,1,2,4);``console.log(arr); ``// [5, 2, 4, 4, 6, 9, 11]``console.log(arrRemoved3); ``//[7]  ```    **9、indexOf()和 lastIndexOf()**    indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。   lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。    这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回1。在比较第一个参数与数组中的每一项时，会使用全等操作符。    ```  var` `arr = [1,3,5,7,7,5,3,1];``console.log(arr.indexOf(5)); ``//2``console.log(arr.lastIndexOf(5)); ``//5``console.log(arr.indexOf(5,2)); ``//2``console.log(arr.lastIndexOf(5,4)); ``//2``console.log(arr.indexOf(``"5"``)); ``//-1  ```    **10、forEach()**    forEach()：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组内容；第对应的数组索引，数组本身。    ```  var` `arr = [1, 2, 3, 4, 5];``arr.forEach(``function``(x, index, a){``console.log(x + ``\'|\'` `+ index + ``\'|\'` `+ (a === arr));``});``// 输出为：``// 1|0|true``// 2|1|true``// 3|2|true``// 4|3|true``// 5|4|true  ```    **11、map()**    map()：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。    下面代码利用map方法实现数组中每个数求平方。    ```  var` `arr = [1, 2, 3, 4, 5];``var` `arr2 = arr.map(``function``(item){``return` `item*item;``});``console.log(arr2); ``//[1, 4, 9, 16, 25]  ```    **12、filter()**    filter()：“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。    ```  var` `arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];``var` `arr2 = arr.filter(``function``(x, index) {``return` `index % 3 === 0 || x >= 8;``}); ``console.log(arr2); ``//[1, 4, 7, 8, 9, 10]  ```    **13、every()**    every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。    ```  var` `arr = [1, 2, 3, 4, 5];``var` `arr2 = arr.every(``function``(x) {``return` `x < 10;``}); ``console.log(arr2); ``//true``var` `arr3 = arr.every(``function``(x) {``return` `x < 3;``}); ``console.log(arr3); ``// false  ```    **14、some()**    some()：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。    ```  var` `arr = [1, 2, 3, 4, 5];``var` `arr2 = arr.some(``function``(x) {``return` `x < 3;``}); ``console.log(arr2); ``//true``var` `arr3 = arr.some(``function``(x) {``return` `x < 1;``}); ``console.log(arr3); ``// false  ```    **15、reduce()和 reduceRight()**    这两个方法都会实现迭代数组的所有项，然后构建一个最终返回的值。reduce()方法从数组的第一项开始，逐个遍历到最后。而 reduceRight()则从数组的最后一项开始，向前遍历到第一项。    这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。    传给 reduce()和 reduceRight()的函数接收 4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。    下面代码用reduce()实现数组求和，数组一开始加了一个初始值10。    ```  var` `values = [1,2,3,4,5];``var` `sum = values.reduceRight(``function``(prev, cur, index, array){``return` `prev + cur;``},10);``console.log(sum); ``//25  ```'},{title:"【读书笔记】《github》实训内容",path:"/posts/4shixun.html",strippedContent:' 周一  实训第一天    1.安装nodejs    2.安装tyora    3.安装jquery    4.注册github。 代码托管器    5.学习github菜鸟教程  https://www.runoob.com/ git/git -tutorial.html注:     1.ctrl + /是查看源代码。     2.保存文件后缀名为.md。     3代码符号输入后必须加空格。        实训第二天1.安装Git。 (上传工具)    2.打开www.github.com, 创建新的代码库，命名为：用户名+.github.io。    3.创建工作文件夹，在文件夹中右键打开Git Bash Hear,输入git clone +粘贴代码库地址。    4在文件夹中创建index.html, 并用记事本方式输入H5格式与内容。    5.右键打开Git Bash Hear。    6.输入git status (粘贴本人地址)     7输入git add . (检查状态)    8输入git commit一 m" (注释)" (提交版本库)    9输入git push (上传)    10.上传邮箱。    11上传用户名。    12.复制新手教程。    13输入账号密码。    14刷新页面，出现上传文件。    15.复制 用户名+ .github.io 。 打开新网页粘贴。            实训第三天      1.npm    (国外的下载)。    2.cnpm (国内镜像)。    3.输入npm -V。    4.百度淘宝镜像，复制使用说明，粘贴至c盘根目录cmd。    5.等待下载，下载完成在cmd中输入cnpm -V。    6.输入cnpm install -g @vue/cli.    7输入vue -V。    8.输入cnpmi -g vuepress。    9.百度vuepress官网学习。    10.建立工作文件夹，命名用英文。    11.创建README.md文件。    12.cmd命令打开文件夹。    13输入vuepress dev。    14复制链接，打开浏览器。    实训第四天    1.创建文件夹，命名为vuepress。    2右键打开Git Bash Hear。    3.百度liujiaozhu666.github.io.    4.点击页面最下方indigo material。    5.复制模板分支命令，粘贴至git。    6.运行init.sh。    7.后续运行在文件夹cmd中输入npm run dev。    8.复制链接百度打开。    9.修改方式: vue..._ > docs-> .vuepress-> config.js。    10.可修改项: title, description, author, email, github。        实训第五天    1.创建.md文件。  2.将文件拖入vuepress > docs- > posts。    3编辑.md文件:    title:标题。date:时间。tags: [类型]。    4.下一行开始输入内容。  5.在文件夹cmd中输入npm run dev。    6.复制链接百度打开。  7在e...-node .... >deploy.sh中， 第一行! 前加#注释，最下方20行(git push -f .. )删除#，修改地址。    8.在文件夹cmd中输入npm run build, 打包完成。    9.双击文件夹中deploy.sh。  10.打开github官网查看是否打包 上传成功。'}]}}]);